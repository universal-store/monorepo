schema {
  query: query_root
  mutation: mutation_root
  subscription: subscription_root
}

# expression to compare columns of type Boolean. All fields are combined with logical 'AND'.
input Boolean_comparison_exp {
  _eq: Boolean
  _gt: Boolean
  _gte: Boolean
  _in: [Boolean!]
  _is_null: Boolean
  _lt: Boolean
  _lte: Boolean
  _neq: Boolean
  _nin: [Boolean!]
}

scalar geography

# Expression to compare the result of casting a column of type geography. Multiple
# cast targets are combined with logical 'AND'.
input geography_cast_exp {
  geometry: geometry_comparison_exp
}

# expression to compare columns of type geography. All fields are combined with logical 'AND'.
input geography_comparison_exp {
  _cast: geography_cast_exp
  _eq: geography
  _gt: geography
  _gte: geography
  _in: [geography!]
  _is_null: Boolean
  _lt: geography
  _lte: geography
  _neq: geography
  _nin: [geography!]

  # is the column within a distance from a geography value
  _st_d_within: st_d_within_geography_input

  # does the column spatially intersect the given geography value
  _st_intersects: geography
}

scalar geometry

# Expression to compare the result of casting a column of type geometry. Multiple
# cast targets are combined with logical 'AND'.
input geometry_cast_exp {
  geography: geography_comparison_exp
}

# expression to compare columns of type geometry. All fields are combined with logical 'AND'.
input geometry_comparison_exp {
  _cast: geometry_cast_exp
  _eq: geometry
  _gt: geometry
  _gte: geometry
  _in: [geometry!]
  _is_null: Boolean
  _lt: geometry
  _lte: geometry
  _neq: geometry
  _nin: [geometry!]

  # does the column contain the given geometry value
  _st_contains: geometry

  # does the column crosses the given geometry value
  _st_crosses: geometry

  # is the column within a distance from a geometry value
  _st_d_within: st_d_within_input

  # is the column equal to given geometry value. Directionality is ignored
  _st_equals: geometry

  # does the column spatially intersect the given geometry value
  _st_intersects: geometry

  # does the column 'spatially overlap' (intersect but not completely contain) the given geometry value
  _st_overlaps: geometry

  # does the column have atleast one point in common with the given geometry value
  _st_touches: geometry

  # is the column contained in the given geometry value
  _st_within: geometry
}

scalar money

# expression to compare columns of type money. All fields are combined with logical 'AND'.
input money_comparison_exp {
  _eq: money
  _gt: money
  _gte: money
  _in: [money!]
  _is_null: Boolean
  _lt: money
  _lte: money
  _neq: money
  _nin: [money!]
}

# mutation root
type mutation_root {
  # delete data from the table: "Store"
  delete_Store(
    # filter the rows which have to be deleted
    where: Store_bool_exp!
  ): Store_mutation_response

  # delete data from the table: "StoreItem"
  delete_StoreItem(
    # filter the rows which have to be deleted
    where: StoreItem_bool_exp!
  ): StoreItem_mutation_response

  # delete data from the table: "StoreItemPic"
  delete_StoreItemPic(
    # filter the rows which have to be deleted
    where: StoreItemPic_bool_exp!
  ): StoreItemPic_mutation_response

  # delete single row from the table: "StoreItemPic"
  delete_StoreItemPic_by_pk(id: uuid!): StoreItemPic

  # delete single row from the table: "StoreItem"
  delete_StoreItem_by_pk(barcodeId: String!): StoreItem

  # delete data from the table: "StorePic"
  delete_StorePic(
    # filter the rows which have to be deleted
    where: StorePic_bool_exp!
  ): StorePic_mutation_response

  # delete single row from the table: "StorePic"
  delete_StorePic_by_pk(id: uuid!): StorePic

  # delete single row from the table: "Store"
  delete_Store_by_pk(id: uuid!): Store

  # delete data from the table: "User"
  delete_User(
    # filter the rows which have to be deleted
    where: User_bool_exp!
  ): User_mutation_response

  # delete data from the table: "UserCartItem"
  delete_UserCartItem(
    # filter the rows which have to be deleted
    where: UserCartItem_bool_exp!
  ): UserCartItem_mutation_response

  # delete single row from the table: "UserCartItem"
  delete_UserCartItem_by_pk(id: uuid!): UserCartItem

  # delete data from the table: "UserFavoriteItem"
  delete_UserFavoriteItem(
    # filter the rows which have to be deleted
    where: UserFavoriteItem_bool_exp!
  ): UserFavoriteItem_mutation_response

  # delete single row from the table: "UserFavoriteItem"
  delete_UserFavoriteItem_by_pk(id: uuid!): UserFavoriteItem

  # delete data from the table: "UserFavoriteStore"
  delete_UserFavoriteStore(
    # filter the rows which have to be deleted
    where: UserFavoriteStore_bool_exp!
  ): UserFavoriteStore_mutation_response

  # delete single row from the table: "UserFavoriteStore"
  delete_UserFavoriteStore_by_pk(id: uuid!): UserFavoriteStore

  # delete single row from the table: "User"
  delete_User_by_pk(id: String!): User

  # insert data into the table: "Store"
  insert_Store(
    # the rows to be inserted
    objects: [Store_insert_input!]!

    # on conflict condition
    on_conflict: Store_on_conflict
  ): Store_mutation_response

  # insert data into the table: "StoreItem"
  insert_StoreItem(
    # the rows to be inserted
    objects: [StoreItem_insert_input!]!

    # on conflict condition
    on_conflict: StoreItem_on_conflict
  ): StoreItem_mutation_response

  # insert data into the table: "StoreItemPic"
  insert_StoreItemPic(
    # the rows to be inserted
    objects: [StoreItemPic_insert_input!]!

    # on conflict condition
    on_conflict: StoreItemPic_on_conflict
  ): StoreItemPic_mutation_response

  # insert a single row into the table: "StoreItemPic"
  insert_StoreItemPic_one(
    # the row to be inserted
    object: StoreItemPic_insert_input!

    # on conflict condition
    on_conflict: StoreItemPic_on_conflict
  ): StoreItemPic

  # insert a single row into the table: "StoreItem"
  insert_StoreItem_one(
    # the row to be inserted
    object: StoreItem_insert_input!

    # on conflict condition
    on_conflict: StoreItem_on_conflict
  ): StoreItem

  # insert data into the table: "StorePic"
  insert_StorePic(
    # the rows to be inserted
    objects: [StorePic_insert_input!]!

    # on conflict condition
    on_conflict: StorePic_on_conflict
  ): StorePic_mutation_response

  # insert a single row into the table: "StorePic"
  insert_StorePic_one(
    # the row to be inserted
    object: StorePic_insert_input!

    # on conflict condition
    on_conflict: StorePic_on_conflict
  ): StorePic

  # insert a single row into the table: "Store"
  insert_Store_one(
    # the row to be inserted
    object: Store_insert_input!

    # on conflict condition
    on_conflict: Store_on_conflict
  ): Store

  # insert data into the table: "User"
  insert_User(
    # the rows to be inserted
    objects: [User_insert_input!]!

    # on conflict condition
    on_conflict: User_on_conflict
  ): User_mutation_response

  # insert data into the table: "UserCartItem"
  insert_UserCartItem(
    # the rows to be inserted
    objects: [UserCartItem_insert_input!]!

    # on conflict condition
    on_conflict: UserCartItem_on_conflict
  ): UserCartItem_mutation_response

  # insert a single row into the table: "UserCartItem"
  insert_UserCartItem_one(
    # the row to be inserted
    object: UserCartItem_insert_input!

    # on conflict condition
    on_conflict: UserCartItem_on_conflict
  ): UserCartItem

  # insert data into the table: "UserFavoriteItem"
  insert_UserFavoriteItem(
    # the rows to be inserted
    objects: [UserFavoriteItem_insert_input!]!

    # on conflict condition
    on_conflict: UserFavoriteItem_on_conflict
  ): UserFavoriteItem_mutation_response

  # insert a single row into the table: "UserFavoriteItem"
  insert_UserFavoriteItem_one(
    # the row to be inserted
    object: UserFavoriteItem_insert_input!

    # on conflict condition
    on_conflict: UserFavoriteItem_on_conflict
  ): UserFavoriteItem

  # insert data into the table: "UserFavoriteStore"
  insert_UserFavoriteStore(
    # the rows to be inserted
    objects: [UserFavoriteStore_insert_input!]!

    # on conflict condition
    on_conflict: UserFavoriteStore_on_conflict
  ): UserFavoriteStore_mutation_response

  # insert a single row into the table: "UserFavoriteStore"
  insert_UserFavoriteStore_one(
    # the row to be inserted
    object: UserFavoriteStore_insert_input!

    # on conflict condition
    on_conflict: UserFavoriteStore_on_conflict
  ): UserFavoriteStore

  # insert a single row into the table: "User"
  insert_User_one(
    # the row to be inserted
    object: User_insert_input!

    # on conflict condition
    on_conflict: User_on_conflict
  ): User

  # update data of the table: "Store"
  update_Store(
    # sets the columns of the filtered rows to the given values
    _set: Store_set_input

    # filter the rows which have to be updated
    where: Store_bool_exp!
  ): Store_mutation_response

  # update data of the table: "StoreItem"
  update_StoreItem(
    # increments the integer columns with given value of the filtered values
    _inc: StoreItem_inc_input

    # sets the columns of the filtered rows to the given values
    _set: StoreItem_set_input

    # filter the rows which have to be updated
    where: StoreItem_bool_exp!
  ): StoreItem_mutation_response

  # update data of the table: "StoreItemPic"
  update_StoreItemPic(
    # sets the columns of the filtered rows to the given values
    _set: StoreItemPic_set_input

    # filter the rows which have to be updated
    where: StoreItemPic_bool_exp!
  ): StoreItemPic_mutation_response

  # update single row of the table: "StoreItemPic"
  update_StoreItemPic_by_pk(
    # sets the columns of the filtered rows to the given values
    _set: StoreItemPic_set_input
    pk_columns: StoreItemPic_pk_columns_input!
  ): StoreItemPic

  # update single row of the table: "StoreItem"
  update_StoreItem_by_pk(
    # increments the integer columns with given value of the filtered values
    _inc: StoreItem_inc_input

    # sets the columns of the filtered rows to the given values
    _set: StoreItem_set_input
    pk_columns: StoreItem_pk_columns_input!
  ): StoreItem

  # update data of the table: "StorePic"
  update_StorePic(
    # sets the columns of the filtered rows to the given values
    _set: StorePic_set_input

    # filter the rows which have to be updated
    where: StorePic_bool_exp!
  ): StorePic_mutation_response

  # update single row of the table: "StorePic"
  update_StorePic_by_pk(
    # sets the columns of the filtered rows to the given values
    _set: StorePic_set_input
    pk_columns: StorePic_pk_columns_input!
  ): StorePic

  # update single row of the table: "Store"
  update_Store_by_pk(
    # sets the columns of the filtered rows to the given values
    _set: Store_set_input
    pk_columns: Store_pk_columns_input!
  ): Store

  # update data of the table: "User"
  update_User(
    # sets the columns of the filtered rows to the given values
    _set: User_set_input

    # filter the rows which have to be updated
    where: User_bool_exp!
  ): User_mutation_response

  # update data of the table: "UserCartItem"
  update_UserCartItem(
    # sets the columns of the filtered rows to the given values
    _set: UserCartItem_set_input

    # filter the rows which have to be updated
    where: UserCartItem_bool_exp!
  ): UserCartItem_mutation_response

  # update single row of the table: "UserCartItem"
  update_UserCartItem_by_pk(
    # sets the columns of the filtered rows to the given values
    _set: UserCartItem_set_input
    pk_columns: UserCartItem_pk_columns_input!
  ): UserCartItem

  # update data of the table: "UserFavoriteItem"
  update_UserFavoriteItem(
    # sets the columns of the filtered rows to the given values
    _set: UserFavoriteItem_set_input

    # filter the rows which have to be updated
    where: UserFavoriteItem_bool_exp!
  ): UserFavoriteItem_mutation_response

  # update single row of the table: "UserFavoriteItem"
  update_UserFavoriteItem_by_pk(
    # sets the columns of the filtered rows to the given values
    _set: UserFavoriteItem_set_input
    pk_columns: UserFavoriteItem_pk_columns_input!
  ): UserFavoriteItem

  # update data of the table: "UserFavoriteStore"
  update_UserFavoriteStore(
    # sets the columns of the filtered rows to the given values
    _set: UserFavoriteStore_set_input

    # filter the rows which have to be updated
    where: UserFavoriteStore_bool_exp!
  ): UserFavoriteStore_mutation_response

  # update single row of the table: "UserFavoriteStore"
  update_UserFavoriteStore_by_pk(
    # sets the columns of the filtered rows to the given values
    _set: UserFavoriteStore_set_input
    pk_columns: UserFavoriteStore_pk_columns_input!
  ): UserFavoriteStore

  # update single row of the table: "User"
  update_User_by_pk(
    # sets the columns of the filtered rows to the given values
    _set: User_set_input
    pk_columns: User_pk_columns_input!
  ): User
}

scalar name

# expression to compare columns of type name. All fields are combined with logical 'AND'.
input name_comparison_exp {
  _eq: name
  _gt: name
  _gte: name
  _in: [name!]
  _is_null: Boolean
  _lt: name
  _lte: name
  _neq: name
  _nin: [name!]
}

# column ordering options
enum order_by {
  # in the ascending order, nulls last
  asc

  # in the ascending order, nulls first
  asc_nulls_first

  # in the ascending order, nulls last
  asc_nulls_last

  # in the descending order, nulls first
  desc

  # in the descending order, nulls first
  desc_nulls_first

  # in the descending order, nulls last
  desc_nulls_last
}

# query root
type query_root {
  # fetch data from the table: "Store"
  Store(
    # distinct select on columns
    distinct_on: [Store_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [Store_order_by!]

    # filter the rows returned
    where: Store_bool_exp
  ): [Store!]!

  # fetch data from the table: "StoreItem"
  StoreItem(
    # distinct select on columns
    distinct_on: [StoreItem_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [StoreItem_order_by!]

    # filter the rows returned
    where: StoreItem_bool_exp
  ): [StoreItem!]!

  # fetch data from the table: "StoreItemPic"
  StoreItemPic(
    # distinct select on columns
    distinct_on: [StoreItemPic_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [StoreItemPic_order_by!]

    # filter the rows returned
    where: StoreItemPic_bool_exp
  ): [StoreItemPic!]!

  # fetch aggregated fields from the table: "StoreItemPic"
  StoreItemPic_aggregate(
    # distinct select on columns
    distinct_on: [StoreItemPic_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [StoreItemPic_order_by!]

    # filter the rows returned
    where: StoreItemPic_bool_exp
  ): StoreItemPic_aggregate!

  # fetch data from the table: "StoreItemPic" using primary key columns
  StoreItemPic_by_pk(id: uuid!): StoreItemPic

  # fetch aggregated fields from the table: "StoreItem"
  StoreItem_aggregate(
    # distinct select on columns
    distinct_on: [StoreItem_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [StoreItem_order_by!]

    # filter the rows returned
    where: StoreItem_bool_exp
  ): StoreItem_aggregate!

  # fetch data from the table: "StoreItem" using primary key columns
  StoreItem_by_pk(barcodeId: String!): StoreItem

  # fetch data from the table: "StorePic"
  StorePic(
    # distinct select on columns
    distinct_on: [StorePic_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [StorePic_order_by!]

    # filter the rows returned
    where: StorePic_bool_exp
  ): [StorePic!]!

  # fetch aggregated fields from the table: "StorePic"
  StorePic_aggregate(
    # distinct select on columns
    distinct_on: [StorePic_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [StorePic_order_by!]

    # filter the rows returned
    where: StorePic_bool_exp
  ): StorePic_aggregate!

  # fetch data from the table: "StorePic" using primary key columns
  StorePic_by_pk(id: uuid!): StorePic

  # fetch aggregated fields from the table: "Store"
  Store_aggregate(
    # distinct select on columns
    distinct_on: [Store_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [Store_order_by!]

    # filter the rows returned
    where: Store_bool_exp
  ): Store_aggregate!

  # fetch data from the table: "Store" using primary key columns
  Store_by_pk(id: uuid!): Store

  # fetch data from the table: "User"
  User(
    # distinct select on columns
    distinct_on: [User_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [User_order_by!]

    # filter the rows returned
    where: User_bool_exp
  ): [User!]!

  # fetch data from the table: "UserCartItem"
  UserCartItem(
    # distinct select on columns
    distinct_on: [UserCartItem_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [UserCartItem_order_by!]

    # filter the rows returned
    where: UserCartItem_bool_exp
  ): [UserCartItem!]!

  # fetch aggregated fields from the table: "UserCartItem"
  UserCartItem_aggregate(
    # distinct select on columns
    distinct_on: [UserCartItem_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [UserCartItem_order_by!]

    # filter the rows returned
    where: UserCartItem_bool_exp
  ): UserCartItem_aggregate!

  # fetch data from the table: "UserCartItem" using primary key columns
  UserCartItem_by_pk(id: uuid!): UserCartItem

  # fetch data from the table: "UserFavoriteItem"
  UserFavoriteItem(
    # distinct select on columns
    distinct_on: [UserFavoriteItem_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [UserFavoriteItem_order_by!]

    # filter the rows returned
    where: UserFavoriteItem_bool_exp
  ): [UserFavoriteItem!]!

  # fetch aggregated fields from the table: "UserFavoriteItem"
  UserFavoriteItem_aggregate(
    # distinct select on columns
    distinct_on: [UserFavoriteItem_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [UserFavoriteItem_order_by!]

    # filter the rows returned
    where: UserFavoriteItem_bool_exp
  ): UserFavoriteItem_aggregate!

  # fetch data from the table: "UserFavoriteItem" using primary key columns
  UserFavoriteItem_by_pk(id: uuid!): UserFavoriteItem

  # fetch data from the table: "UserFavoriteStore"
  UserFavoriteStore(
    # distinct select on columns
    distinct_on: [UserFavoriteStore_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [UserFavoriteStore_order_by!]

    # filter the rows returned
    where: UserFavoriteStore_bool_exp
  ): [UserFavoriteStore!]!

  # fetch aggregated fields from the table: "UserFavoriteStore"
  UserFavoriteStore_aggregate(
    # distinct select on columns
    distinct_on: [UserFavoriteStore_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [UserFavoriteStore_order_by!]

    # filter the rows returned
    where: UserFavoriteStore_bool_exp
  ): UserFavoriteStore_aggregate!

  # fetch data from the table: "UserFavoriteStore" using primary key columns
  UserFavoriteStore_by_pk(id: uuid!): UserFavoriteStore

  # fetch aggregated fields from the table: "User"
  User_aggregate(
    # distinct select on columns
    distinct_on: [User_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [User_order_by!]

    # filter the rows returned
    where: User_bool_exp
  ): User_aggregate!

  # fetch data from the table: "User" using primary key columns
  User_by_pk(id: String!): User
}

input st_d_within_geography_input {
  distance: Float!
  from: geography!
  use_spheroid: Boolean = true
}

input st_d_within_input {
  distance: Float!
  from: geometry!
}

# columns and relationships of "Store"
type Store {
  # An array relationship
  StoreItems(
    # distinct select on columns
    distinct_on: [StoreItem_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [StoreItem_order_by!]

    # filter the rows returned
    where: StoreItem_bool_exp
  ): [StoreItem!]!

  # An aggregated array relationship
  StoreItems_aggregate(
    # distinct select on columns
    distinct_on: [StoreItem_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [StoreItem_order_by!]

    # filter the rows returned
    where: StoreItem_bool_exp
  ): StoreItem_aggregate!

  # An object relationship
  StorePic: StorePic

  # An array relationship
  UserFavoriteStores(
    # distinct select on columns
    distinct_on: [UserFavoriteStore_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [UserFavoriteStore_order_by!]

    # filter the rows returned
    where: UserFavoriteStore_bool_exp
  ): [UserFavoriteStore!]!

  # An aggregated array relationship
  UserFavoriteStores_aggregate(
    # distinct select on columns
    distinct_on: [UserFavoriteStore_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [UserFavoriteStore_order_by!]

    # filter the rows returned
    where: UserFavoriteStore_bool_exp
  ): UserFavoriteStore_aggregate!
  address: String!
  category: String
  description: String
  id: uuid!
  location: geography!
  name: String!
  storePicId: uuid
}

# aggregated selection of "Store"
type Store_aggregate {
  aggregate: Store_aggregate_fields
  nodes: [Store!]!
}

# aggregate fields of "Store"
type Store_aggregate_fields {
  count(columns: [Store_select_column!], distinct: Boolean): Int
  max: Store_max_fields
  min: Store_min_fields
}

# order by aggregate values of table "Store"
input Store_aggregate_order_by {
  count: order_by
  max: Store_max_order_by
  min: Store_min_order_by
}

# input type for inserting array relation for remote table "Store"
input Store_arr_rel_insert_input {
  data: [Store_insert_input!]!
  on_conflict: Store_on_conflict
}

# Boolean expression to filter rows from the table "Store". All fields are combined with a logical 'AND'.
input Store_bool_exp {
  StoreItems: StoreItem_bool_exp
  StorePic: StorePic_bool_exp
  UserFavoriteStores: UserFavoriteStore_bool_exp
  _and: [Store_bool_exp]
  _not: Store_bool_exp
  _or: [Store_bool_exp]
  address: String_comparison_exp
  category: String_comparison_exp
  description: String_comparison_exp
  id: uuid_comparison_exp
  location: geography_comparison_exp
  name: String_comparison_exp
  storePicId: uuid_comparison_exp
}

# unique or primary key constraints on table "Store"
enum Store_constraint {
  # unique or primary key constraint
  Store_pkey

  # unique or primary key constraint
  Store_storePicId_key
}

# input type for inserting data into table "Store"
input Store_insert_input {
  StoreItems: StoreItem_arr_rel_insert_input
  StorePic: StorePic_obj_rel_insert_input
  UserFavoriteStores: UserFavoriteStore_arr_rel_insert_input
  address: String
  category: String
  description: String
  id: uuid
  location: geography
  name: String
  storePicId: uuid
}

# aggregate max on columns
type Store_max_fields {
  address: String
  category: String
  description: String
  id: uuid
  name: String
  storePicId: uuid
}

# order by max() on columns of table "Store"
input Store_max_order_by {
  address: order_by
  category: order_by
  description: order_by
  id: order_by
  name: order_by
  storePicId: order_by
}

# aggregate min on columns
type Store_min_fields {
  address: String
  category: String
  description: String
  id: uuid
  name: String
  storePicId: uuid
}

# order by min() on columns of table "Store"
input Store_min_order_by {
  address: order_by
  category: order_by
  description: order_by
  id: order_by
  name: order_by
  storePicId: order_by
}

# response of any mutation on the table "Store"
type Store_mutation_response {
  # number of affected rows by the mutation
  affected_rows: Int!

  # data of the affected rows by the mutation
  returning: [Store!]!
}

# input type for inserting object relation for remote table "Store"
input Store_obj_rel_insert_input {
  data: Store_insert_input!
  on_conflict: Store_on_conflict
}

# on conflict condition type for table "Store"
input Store_on_conflict {
  constraint: Store_constraint!
  update_columns: [Store_update_column!]!
  where: Store_bool_exp
}

# ordering options when selecting data from "Store"
input Store_order_by {
  StoreItems_aggregate: StoreItem_aggregate_order_by
  StorePic: StorePic_order_by
  UserFavoriteStores_aggregate: UserFavoriteStore_aggregate_order_by
  address: order_by
  category: order_by
  description: order_by
  id: order_by
  location: order_by
  name: order_by
  storePicId: order_by
}

# primary key columns input for table: "Store"
input Store_pk_columns_input {
  id: uuid!
}

# select columns of table "Store"
enum Store_select_column {
  # column name
  address

  # column name
  category

  # column name
  description

  # column name
  id

  # column name
  location

  # column name
  name

  # column name
  storePicId
}

# input type for updating data in table "Store"
input Store_set_input {
  address: String
  category: String
  description: String
  id: uuid
  location: geography
  name: String
  storePicId: uuid
}

# update columns of table "Store"
enum Store_update_column {
  # column name
  address

  # column name
  category

  # column name
  description

  # column name
  id

  # column name
  location

  # column name
  name

  # column name
  storePicId
}

# columns and relationships of "StoreItem"
type StoreItem {
  # An object relationship
  Store: Store!

  # An object relationship
  StoreItemPic: StoreItemPic

  # An array relationship
  UserCartItems(
    # distinct select on columns
    distinct_on: [UserCartItem_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [UserCartItem_order_by!]

    # filter the rows returned
    where: UserCartItem_bool_exp
  ): [UserCartItem!]!

  # An aggregated array relationship
  UserCartItems_aggregate(
    # distinct select on columns
    distinct_on: [UserCartItem_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [UserCartItem_order_by!]

    # filter the rows returned
    where: UserCartItem_bool_exp
  ): UserCartItem_aggregate!

  # An array relationship
  UserFavoriteItems(
    # distinct select on columns
    distinct_on: [UserFavoriteItem_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [UserFavoriteItem_order_by!]

    # filter the rows returned
    where: UserFavoriteItem_bool_exp
  ): [UserFavoriteItem!]!

  # An aggregated array relationship
  UserFavoriteItems_aggregate(
    # distinct select on columns
    distinct_on: [UserFavoriteItem_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [UserFavoriteItem_order_by!]

    # filter the rows returned
    where: UserFavoriteItem_bool_exp
  ): UserFavoriteItem_aggregate!
  barcodeId: String!
  description: String
  itemImageId: uuid
  longName: String!
  price: money!
  purchased: Boolean!
  quantity: String!
  shortName: String
  storeId: uuid!
}

# aggregated selection of "StoreItem"
type StoreItem_aggregate {
  aggregate: StoreItem_aggregate_fields
  nodes: [StoreItem!]!
}

# aggregate fields of "StoreItem"
type StoreItem_aggregate_fields {
  avg: StoreItem_avg_fields
  count(columns: [StoreItem_select_column!], distinct: Boolean): Int
  max: StoreItem_max_fields
  min: StoreItem_min_fields
  stddev: StoreItem_stddev_fields
  stddev_pop: StoreItem_stddev_pop_fields
  stddev_samp: StoreItem_stddev_samp_fields
  sum: StoreItem_sum_fields
  var_pop: StoreItem_var_pop_fields
  var_samp: StoreItem_var_samp_fields
  variance: StoreItem_variance_fields
}

# order by aggregate values of table "StoreItem"
input StoreItem_aggregate_order_by {
  avg: StoreItem_avg_order_by
  count: order_by
  max: StoreItem_max_order_by
  min: StoreItem_min_order_by
  stddev: StoreItem_stddev_order_by
  stddev_pop: StoreItem_stddev_pop_order_by
  stddev_samp: StoreItem_stddev_samp_order_by
  sum: StoreItem_sum_order_by
  var_pop: StoreItem_var_pop_order_by
  var_samp: StoreItem_var_samp_order_by
  variance: StoreItem_variance_order_by
}

# input type for inserting array relation for remote table "StoreItem"
input StoreItem_arr_rel_insert_input {
  data: [StoreItem_insert_input!]!
  on_conflict: StoreItem_on_conflict
}

# aggregate avg on columns
type StoreItem_avg_fields {
  price: Float
}

# order by avg() on columns of table "StoreItem"
input StoreItem_avg_order_by {
  price: order_by
}

# Boolean expression to filter rows from the table "StoreItem". All fields are combined with a logical 'AND'.
input StoreItem_bool_exp {
  Store: Store_bool_exp
  StoreItemPic: StoreItemPic_bool_exp
  UserCartItems: UserCartItem_bool_exp
  UserFavoriteItems: UserFavoriteItem_bool_exp
  _and: [StoreItem_bool_exp]
  _not: StoreItem_bool_exp
  _or: [StoreItem_bool_exp]
  barcodeId: String_comparison_exp
  description: String_comparison_exp
  itemImageId: uuid_comparison_exp
  longName: String_comparison_exp
  price: money_comparison_exp
  purchased: Boolean_comparison_exp
  quantity: String_comparison_exp
  shortName: String_comparison_exp
  storeId: uuid_comparison_exp
}

# unique or primary key constraints on table "StoreItem"
enum StoreItem_constraint {
  # unique or primary key constraint
  StoreItem_barcodeId_key

  # unique or primary key constraint
  StoreItem_itemImageId_key

  # unique or primary key constraint
  StoreItem_pkey
}

# input type for incrementing integer column in table "StoreItem"
input StoreItem_inc_input {
  price: money
}

# input type for inserting data into table "StoreItem"
input StoreItem_insert_input {
  Store: Store_obj_rel_insert_input
  StoreItemPic: StoreItemPic_obj_rel_insert_input
  UserCartItems: UserCartItem_arr_rel_insert_input
  UserFavoriteItems: UserFavoriteItem_arr_rel_insert_input
  barcodeId: String
  description: String
  itemImageId: uuid
  longName: String
  price: money
  purchased: Boolean
  quantity: String
  shortName: String
  storeId: uuid
}

# aggregate max on columns
type StoreItem_max_fields {
  barcodeId: String
  description: String
  itemImageId: uuid
  longName: String
  price: money
  quantity: String
  shortName: String
  storeId: uuid
}

# order by max() on columns of table "StoreItem"
input StoreItem_max_order_by {
  barcodeId: order_by
  description: order_by
  itemImageId: order_by
  longName: order_by
  price: order_by
  quantity: order_by
  shortName: order_by
  storeId: order_by
}

# aggregate min on columns
type StoreItem_min_fields {
  barcodeId: String
  description: String
  itemImageId: uuid
  longName: String
  price: money
  quantity: String
  shortName: String
  storeId: uuid
}

# order by min() on columns of table "StoreItem"
input StoreItem_min_order_by {
  barcodeId: order_by
  description: order_by
  itemImageId: order_by
  longName: order_by
  price: order_by
  quantity: order_by
  shortName: order_by
  storeId: order_by
}

# response of any mutation on the table "StoreItem"
type StoreItem_mutation_response {
  # number of affected rows by the mutation
  affected_rows: Int!

  # data of the affected rows by the mutation
  returning: [StoreItem!]!
}

# input type for inserting object relation for remote table "StoreItem"
input StoreItem_obj_rel_insert_input {
  data: StoreItem_insert_input!
  on_conflict: StoreItem_on_conflict
}

# on conflict condition type for table "StoreItem"
input StoreItem_on_conflict {
  constraint: StoreItem_constraint!
  update_columns: [StoreItem_update_column!]!
  where: StoreItem_bool_exp
}

# ordering options when selecting data from "StoreItem"
input StoreItem_order_by {
  Store: Store_order_by
  StoreItemPic: StoreItemPic_order_by
  UserCartItems_aggregate: UserCartItem_aggregate_order_by
  UserFavoriteItems_aggregate: UserFavoriteItem_aggregate_order_by
  barcodeId: order_by
  description: order_by
  itemImageId: order_by
  longName: order_by
  price: order_by
  purchased: order_by
  quantity: order_by
  shortName: order_by
  storeId: order_by
}

# primary key columns input for table: "StoreItem"
input StoreItem_pk_columns_input {
  barcodeId: String!
}

# select columns of table "StoreItem"
enum StoreItem_select_column {
  # column name
  barcodeId

  # column name
  description

  # column name
  itemImageId

  # column name
  longName

  # column name
  price

  # column name
  purchased

  # column name
  quantity

  # column name
  shortName

  # column name
  storeId
}

# input type for updating data in table "StoreItem"
input StoreItem_set_input {
  barcodeId: String
  description: String
  itemImageId: uuid
  longName: String
  price: money
  purchased: Boolean
  quantity: String
  shortName: String
  storeId: uuid
}

# aggregate stddev on columns
type StoreItem_stddev_fields {
  price: Float
}

# order by stddev() on columns of table "StoreItem"
input StoreItem_stddev_order_by {
  price: order_by
}

# aggregate stddev_pop on columns
type StoreItem_stddev_pop_fields {
  price: Float
}

# order by stddev_pop() on columns of table "StoreItem"
input StoreItem_stddev_pop_order_by {
  price: order_by
}

# aggregate stddev_samp on columns
type StoreItem_stddev_samp_fields {
  price: Float
}

# order by stddev_samp() on columns of table "StoreItem"
input StoreItem_stddev_samp_order_by {
  price: order_by
}

# aggregate sum on columns
type StoreItem_sum_fields {
  price: money
}

# order by sum() on columns of table "StoreItem"
input StoreItem_sum_order_by {
  price: order_by
}

# update columns of table "StoreItem"
enum StoreItem_update_column {
  # column name
  barcodeId

  # column name
  description

  # column name
  itemImageId

  # column name
  longName

  # column name
  price

  # column name
  purchased

  # column name
  quantity

  # column name
  shortName

  # column name
  storeId
}

# aggregate var_pop on columns
type StoreItem_var_pop_fields {
  price: Float
}

# order by var_pop() on columns of table "StoreItem"
input StoreItem_var_pop_order_by {
  price: order_by
}

# aggregate var_samp on columns
type StoreItem_var_samp_fields {
  price: Float
}

# order by var_samp() on columns of table "StoreItem"
input StoreItem_var_samp_order_by {
  price: order_by
}

# aggregate variance on columns
type StoreItem_variance_fields {
  price: Float
}

# order by variance() on columns of table "StoreItem"
input StoreItem_variance_order_by {
  price: order_by
}

# columns and relationships of "StoreItemPic"
type StoreItemPic {
  # An object relationship
  StoreItem: StoreItem
  id: uuid!
  size128: String!
  size256: String!
  size64: String!
}

# aggregated selection of "StoreItemPic"
type StoreItemPic_aggregate {
  aggregate: StoreItemPic_aggregate_fields
  nodes: [StoreItemPic!]!
}

# aggregate fields of "StoreItemPic"
type StoreItemPic_aggregate_fields {
  count(columns: [StoreItemPic_select_column!], distinct: Boolean): Int
  max: StoreItemPic_max_fields
  min: StoreItemPic_min_fields
}

# order by aggregate values of table "StoreItemPic"
input StoreItemPic_aggregate_order_by {
  count: order_by
  max: StoreItemPic_max_order_by
  min: StoreItemPic_min_order_by
}

# input type for inserting array relation for remote table "StoreItemPic"
input StoreItemPic_arr_rel_insert_input {
  data: [StoreItemPic_insert_input!]!
  on_conflict: StoreItemPic_on_conflict
}

# Boolean expression to filter rows from the table "StoreItemPic". All fields are combined with a logical 'AND'.
input StoreItemPic_bool_exp {
  StoreItem: StoreItem_bool_exp
  _and: [StoreItemPic_bool_exp]
  _not: StoreItemPic_bool_exp
  _or: [StoreItemPic_bool_exp]
  id: uuid_comparison_exp
  size128: String_comparison_exp
  size256: String_comparison_exp
  size64: String_comparison_exp
}

# unique or primary key constraints on table "StoreItemPic"
enum StoreItemPic_constraint {
  # unique or primary key constraint
  StoreItemPic_pkey
}

# input type for inserting data into table "StoreItemPic"
input StoreItemPic_insert_input {
  StoreItem: StoreItem_obj_rel_insert_input
  id: uuid
  size128: String
  size256: String
  size64: String
}

# aggregate max on columns
type StoreItemPic_max_fields {
  id: uuid
  size128: String
  size256: String
  size64: String
}

# order by max() on columns of table "StoreItemPic"
input StoreItemPic_max_order_by {
  id: order_by
  size128: order_by
  size256: order_by
  size64: order_by
}

# aggregate min on columns
type StoreItemPic_min_fields {
  id: uuid
  size128: String
  size256: String
  size64: String
}

# order by min() on columns of table "StoreItemPic"
input StoreItemPic_min_order_by {
  id: order_by
  size128: order_by
  size256: order_by
  size64: order_by
}

# response of any mutation on the table "StoreItemPic"
type StoreItemPic_mutation_response {
  # number of affected rows by the mutation
  affected_rows: Int!

  # data of the affected rows by the mutation
  returning: [StoreItemPic!]!
}

# input type for inserting object relation for remote table "StoreItemPic"
input StoreItemPic_obj_rel_insert_input {
  data: StoreItemPic_insert_input!
  on_conflict: StoreItemPic_on_conflict
}

# on conflict condition type for table "StoreItemPic"
input StoreItemPic_on_conflict {
  constraint: StoreItemPic_constraint!
  update_columns: [StoreItemPic_update_column!]!
  where: StoreItemPic_bool_exp
}

# ordering options when selecting data from "StoreItemPic"
input StoreItemPic_order_by {
  StoreItem: StoreItem_order_by
  id: order_by
  size128: order_by
  size256: order_by
  size64: order_by
}

# primary key columns input for table: "StoreItemPic"
input StoreItemPic_pk_columns_input {
  id: uuid!
}

# select columns of table "StoreItemPic"
enum StoreItemPic_select_column {
  # column name
  id

  # column name
  size128

  # column name
  size256

  # column name
  size64
}

# input type for updating data in table "StoreItemPic"
input StoreItemPic_set_input {
  id: uuid
  size128: String
  size256: String
  size64: String
}

# update columns of table "StoreItemPic"
enum StoreItemPic_update_column {
  # column name
  id

  # column name
  size128

  # column name
  size256

  # column name
  size64
}

# columns and relationships of "StorePic"
type StorePic {
  # An object relationship
  Store: Store
  id: uuid!
  size128: String!
  size256: String!
  size64: String!
}

# aggregated selection of "StorePic"
type StorePic_aggregate {
  aggregate: StorePic_aggregate_fields
  nodes: [StorePic!]!
}

# aggregate fields of "StorePic"
type StorePic_aggregate_fields {
  count(columns: [StorePic_select_column!], distinct: Boolean): Int
  max: StorePic_max_fields
  min: StorePic_min_fields
}

# order by aggregate values of table "StorePic"
input StorePic_aggregate_order_by {
  count: order_by
  max: StorePic_max_order_by
  min: StorePic_min_order_by
}

# input type for inserting array relation for remote table "StorePic"
input StorePic_arr_rel_insert_input {
  data: [StorePic_insert_input!]!
  on_conflict: StorePic_on_conflict
}

# Boolean expression to filter rows from the table "StorePic". All fields are combined with a logical 'AND'.
input StorePic_bool_exp {
  Store: Store_bool_exp
  _and: [StorePic_bool_exp]
  _not: StorePic_bool_exp
  _or: [StorePic_bool_exp]
  id: uuid_comparison_exp
  size128: String_comparison_exp
  size256: String_comparison_exp
  size64: String_comparison_exp
}

# unique or primary key constraints on table "StorePic"
enum StorePic_constraint {
  # unique or primary key constraint
  StorePic_pkey
}

# input type for inserting data into table "StorePic"
input StorePic_insert_input {
  Store: Store_obj_rel_insert_input
  id: uuid
  size128: String
  size256: String
  size64: String
}

# aggregate max on columns
type StorePic_max_fields {
  id: uuid
  size128: String
  size256: String
  size64: String
}

# order by max() on columns of table "StorePic"
input StorePic_max_order_by {
  id: order_by
  size128: order_by
  size256: order_by
  size64: order_by
}

# aggregate min on columns
type StorePic_min_fields {
  id: uuid
  size128: String
  size256: String
  size64: String
}

# order by min() on columns of table "StorePic"
input StorePic_min_order_by {
  id: order_by
  size128: order_by
  size256: order_by
  size64: order_by
}

# response of any mutation on the table "StorePic"
type StorePic_mutation_response {
  # number of affected rows by the mutation
  affected_rows: Int!

  # data of the affected rows by the mutation
  returning: [StorePic!]!
}

# input type for inserting object relation for remote table "StorePic"
input StorePic_obj_rel_insert_input {
  data: StorePic_insert_input!
  on_conflict: StorePic_on_conflict
}

# on conflict condition type for table "StorePic"
input StorePic_on_conflict {
  constraint: StorePic_constraint!
  update_columns: [StorePic_update_column!]!
  where: StorePic_bool_exp
}

# ordering options when selecting data from "StorePic"
input StorePic_order_by {
  Store: Store_order_by
  id: order_by
  size128: order_by
  size256: order_by
  size64: order_by
}

# primary key columns input for table: "StorePic"
input StorePic_pk_columns_input {
  id: uuid!
}

# select columns of table "StorePic"
enum StorePic_select_column {
  # column name
  id

  # column name
  size128

  # column name
  size256

  # column name
  size64
}

# input type for updating data in table "StorePic"
input StorePic_set_input {
  id: uuid
  size128: String
  size256: String
  size64: String
}

# update columns of table "StorePic"
enum StorePic_update_column {
  # column name
  id

  # column name
  size128

  # column name
  size256

  # column name
  size64
}

# expression to compare columns of type String. All fields are combined with logical 'AND'.
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String
  _ilike: String
  _in: [String!]
  _is_null: Boolean
  _like: String
  _lt: String
  _lte: String
  _neq: String
  _nilike: String
  _nin: [String!]
  _nlike: String
  _nsimilar: String
  _similar: String
}

# subscription root
type subscription_root {
  # fetch data from the table: "Store"
  Store(
    # distinct select on columns
    distinct_on: [Store_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [Store_order_by!]

    # filter the rows returned
    where: Store_bool_exp
  ): [Store!]!

  # fetch data from the table: "StoreItem"
  StoreItem(
    # distinct select on columns
    distinct_on: [StoreItem_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [StoreItem_order_by!]

    # filter the rows returned
    where: StoreItem_bool_exp
  ): [StoreItem!]!

  # fetch data from the table: "StoreItemPic"
  StoreItemPic(
    # distinct select on columns
    distinct_on: [StoreItemPic_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [StoreItemPic_order_by!]

    # filter the rows returned
    where: StoreItemPic_bool_exp
  ): [StoreItemPic!]!

  # fetch aggregated fields from the table: "StoreItemPic"
  StoreItemPic_aggregate(
    # distinct select on columns
    distinct_on: [StoreItemPic_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [StoreItemPic_order_by!]

    # filter the rows returned
    where: StoreItemPic_bool_exp
  ): StoreItemPic_aggregate!

  # fetch data from the table: "StoreItemPic" using primary key columns
  StoreItemPic_by_pk(id: uuid!): StoreItemPic

  # fetch aggregated fields from the table: "StoreItem"
  StoreItem_aggregate(
    # distinct select on columns
    distinct_on: [StoreItem_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [StoreItem_order_by!]

    # filter the rows returned
    where: StoreItem_bool_exp
  ): StoreItem_aggregate!

  # fetch data from the table: "StoreItem" using primary key columns
  StoreItem_by_pk(barcodeId: String!): StoreItem

  # fetch data from the table: "StorePic"
  StorePic(
    # distinct select on columns
    distinct_on: [StorePic_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [StorePic_order_by!]

    # filter the rows returned
    where: StorePic_bool_exp
  ): [StorePic!]!

  # fetch aggregated fields from the table: "StorePic"
  StorePic_aggregate(
    # distinct select on columns
    distinct_on: [StorePic_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [StorePic_order_by!]

    # filter the rows returned
    where: StorePic_bool_exp
  ): StorePic_aggregate!

  # fetch data from the table: "StorePic" using primary key columns
  StorePic_by_pk(id: uuid!): StorePic

  # fetch aggregated fields from the table: "Store"
  Store_aggregate(
    # distinct select on columns
    distinct_on: [Store_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [Store_order_by!]

    # filter the rows returned
    where: Store_bool_exp
  ): Store_aggregate!

  # fetch data from the table: "Store" using primary key columns
  Store_by_pk(id: uuid!): Store

  # fetch data from the table: "User"
  User(
    # distinct select on columns
    distinct_on: [User_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [User_order_by!]

    # filter the rows returned
    where: User_bool_exp
  ): [User!]!

  # fetch data from the table: "UserCartItem"
  UserCartItem(
    # distinct select on columns
    distinct_on: [UserCartItem_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [UserCartItem_order_by!]

    # filter the rows returned
    where: UserCartItem_bool_exp
  ): [UserCartItem!]!

  # fetch aggregated fields from the table: "UserCartItem"
  UserCartItem_aggregate(
    # distinct select on columns
    distinct_on: [UserCartItem_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [UserCartItem_order_by!]

    # filter the rows returned
    where: UserCartItem_bool_exp
  ): UserCartItem_aggregate!

  # fetch data from the table: "UserCartItem" using primary key columns
  UserCartItem_by_pk(id: uuid!): UserCartItem

  # fetch data from the table: "UserFavoriteItem"
  UserFavoriteItem(
    # distinct select on columns
    distinct_on: [UserFavoriteItem_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [UserFavoriteItem_order_by!]

    # filter the rows returned
    where: UserFavoriteItem_bool_exp
  ): [UserFavoriteItem!]!

  # fetch aggregated fields from the table: "UserFavoriteItem"
  UserFavoriteItem_aggregate(
    # distinct select on columns
    distinct_on: [UserFavoriteItem_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [UserFavoriteItem_order_by!]

    # filter the rows returned
    where: UserFavoriteItem_bool_exp
  ): UserFavoriteItem_aggregate!

  # fetch data from the table: "UserFavoriteItem" using primary key columns
  UserFavoriteItem_by_pk(id: uuid!): UserFavoriteItem

  # fetch data from the table: "UserFavoriteStore"
  UserFavoriteStore(
    # distinct select on columns
    distinct_on: [UserFavoriteStore_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [UserFavoriteStore_order_by!]

    # filter the rows returned
    where: UserFavoriteStore_bool_exp
  ): [UserFavoriteStore!]!

  # fetch aggregated fields from the table: "UserFavoriteStore"
  UserFavoriteStore_aggregate(
    # distinct select on columns
    distinct_on: [UserFavoriteStore_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [UserFavoriteStore_order_by!]

    # filter the rows returned
    where: UserFavoriteStore_bool_exp
  ): UserFavoriteStore_aggregate!

  # fetch data from the table: "UserFavoriteStore" using primary key columns
  UserFavoriteStore_by_pk(id: uuid!): UserFavoriteStore

  # fetch aggregated fields from the table: "User"
  User_aggregate(
    # distinct select on columns
    distinct_on: [User_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [User_order_by!]

    # filter the rows returned
    where: User_bool_exp
  ): User_aggregate!

  # fetch data from the table: "User" using primary key columns
  User_by_pk(id: String!): User
}

# columns and relationships of "User"
type User {
  email: String!
  firstName: name
  id: String!
  lastName: name
}

# aggregated selection of "User"
type User_aggregate {
  aggregate: User_aggregate_fields
  nodes: [User!]!
}

# aggregate fields of "User"
type User_aggregate_fields {
  count(columns: [User_select_column!], distinct: Boolean): Int
  max: User_max_fields
  min: User_min_fields
}

# order by aggregate values of table "User"
input User_aggregate_order_by {
  count: order_by
  max: User_max_order_by
  min: User_min_order_by
}

# input type for inserting array relation for remote table "User"
input User_arr_rel_insert_input {
  data: [User_insert_input!]!
  on_conflict: User_on_conflict
}

# Boolean expression to filter rows from the table "User". All fields are combined with a logical 'AND'.
input User_bool_exp {
  _and: [User_bool_exp]
  _not: User_bool_exp
  _or: [User_bool_exp]
  email: String_comparison_exp
  firstName: name_comparison_exp
  id: String_comparison_exp
  lastName: name_comparison_exp
}

# unique or primary key constraints on table "User"
enum User_constraint {
  # unique or primary key constraint
  User_email_key

  # unique or primary key constraint
  User_pkey
}

# input type for inserting data into table "User"
input User_insert_input {
  email: String
  firstName: name
  id: String
  lastName: name
}

# aggregate max on columns
type User_max_fields {
  email: String
  id: String
}

# order by max() on columns of table "User"
input User_max_order_by {
  email: order_by
  id: order_by
}

# aggregate min on columns
type User_min_fields {
  email: String
  id: String
}

# order by min() on columns of table "User"
input User_min_order_by {
  email: order_by
  id: order_by
}

# response of any mutation on the table "User"
type User_mutation_response {
  # number of affected rows by the mutation
  affected_rows: Int!

  # data of the affected rows by the mutation
  returning: [User!]!
}

# input type for inserting object relation for remote table "User"
input User_obj_rel_insert_input {
  data: User_insert_input!
  on_conflict: User_on_conflict
}

# on conflict condition type for table "User"
input User_on_conflict {
  constraint: User_constraint!
  update_columns: [User_update_column!]!
  where: User_bool_exp
}

# ordering options when selecting data from "User"
input User_order_by {
  email: order_by
  firstName: order_by
  id: order_by
  lastName: order_by
}

# primary key columns input for table: "User"
input User_pk_columns_input {
  id: String!
}

# select columns of table "User"
enum User_select_column {
  # column name
  email

  # column name
  firstName

  # column name
  id

  # column name
  lastName
}

# input type for updating data in table "User"
input User_set_input {
  email: String
  firstName: name
  id: String
  lastName: name
}

# update columns of table "User"
enum User_update_column {
  # column name
  email

  # column name
  firstName

  # column name
  id

  # column name
  lastName
}

# columns and relationships of "UserCartItem"
type UserCartItem {
  # An object relationship
  StoreItem: StoreItem!
  id: uuid!
  itemBarcodeId: String!
  userId: String!
}

# aggregated selection of "UserCartItem"
type UserCartItem_aggregate {
  aggregate: UserCartItem_aggregate_fields
  nodes: [UserCartItem!]!
}

# aggregate fields of "UserCartItem"
type UserCartItem_aggregate_fields {
  count(columns: [UserCartItem_select_column!], distinct: Boolean): Int
  max: UserCartItem_max_fields
  min: UserCartItem_min_fields
}

# order by aggregate values of table "UserCartItem"
input UserCartItem_aggregate_order_by {
  count: order_by
  max: UserCartItem_max_order_by
  min: UserCartItem_min_order_by
}

# input type for inserting array relation for remote table "UserCartItem"
input UserCartItem_arr_rel_insert_input {
  data: [UserCartItem_insert_input!]!
  on_conflict: UserCartItem_on_conflict
}

# Boolean expression to filter rows from the table "UserCartItem". All fields are combined with a logical 'AND'.
input UserCartItem_bool_exp {
  StoreItem: StoreItem_bool_exp
  _and: [UserCartItem_bool_exp]
  _not: UserCartItem_bool_exp
  _or: [UserCartItem_bool_exp]
  id: uuid_comparison_exp
  itemBarcodeId: String_comparison_exp
  userId: String_comparison_exp
}

# unique or primary key constraints on table "UserCartItem"
enum UserCartItem_constraint {
  # unique or primary key constraint
  UserCartItem_pkey
}

# input type for inserting data into table "UserCartItem"
input UserCartItem_insert_input {
  StoreItem: StoreItem_obj_rel_insert_input
  id: uuid
  itemBarcodeId: String
  userId: String
}

# aggregate max on columns
type UserCartItem_max_fields {
  id: uuid
  itemBarcodeId: String
  userId: String
}

# order by max() on columns of table "UserCartItem"
input UserCartItem_max_order_by {
  id: order_by
  itemBarcodeId: order_by
  userId: order_by
}

# aggregate min on columns
type UserCartItem_min_fields {
  id: uuid
  itemBarcodeId: String
  userId: String
}

# order by min() on columns of table "UserCartItem"
input UserCartItem_min_order_by {
  id: order_by
  itemBarcodeId: order_by
  userId: order_by
}

# response of any mutation on the table "UserCartItem"
type UserCartItem_mutation_response {
  # number of affected rows by the mutation
  affected_rows: Int!

  # data of the affected rows by the mutation
  returning: [UserCartItem!]!
}

# input type for inserting object relation for remote table "UserCartItem"
input UserCartItem_obj_rel_insert_input {
  data: UserCartItem_insert_input!
  on_conflict: UserCartItem_on_conflict
}

# on conflict condition type for table "UserCartItem"
input UserCartItem_on_conflict {
  constraint: UserCartItem_constraint!
  update_columns: [UserCartItem_update_column!]!
  where: UserCartItem_bool_exp
}

# ordering options when selecting data from "UserCartItem"
input UserCartItem_order_by {
  StoreItem: StoreItem_order_by
  id: order_by
  itemBarcodeId: order_by
  userId: order_by
}

# primary key columns input for table: "UserCartItem"
input UserCartItem_pk_columns_input {
  id: uuid!
}

# select columns of table "UserCartItem"
enum UserCartItem_select_column {
  # column name
  id

  # column name
  itemBarcodeId

  # column name
  userId
}

# input type for updating data in table "UserCartItem"
input UserCartItem_set_input {
  id: uuid
  itemBarcodeId: String
  userId: String
}

# update columns of table "UserCartItem"
enum UserCartItem_update_column {
  # column name
  id

  # column name
  itemBarcodeId

  # column name
  userId
}

# columns and relationships of "UserFavoriteItem"
type UserFavoriteItem {
  # An object relationship
  StoreItem: StoreItem!
  id: uuid!
  itemBarcodeId: String!
  userId: String!
}

# aggregated selection of "UserFavoriteItem"
type UserFavoriteItem_aggregate {
  aggregate: UserFavoriteItem_aggregate_fields
  nodes: [UserFavoriteItem!]!
}

# aggregate fields of "UserFavoriteItem"
type UserFavoriteItem_aggregate_fields {
  count(columns: [UserFavoriteItem_select_column!], distinct: Boolean): Int
  max: UserFavoriteItem_max_fields
  min: UserFavoriteItem_min_fields
}

# order by aggregate values of table "UserFavoriteItem"
input UserFavoriteItem_aggregate_order_by {
  count: order_by
  max: UserFavoriteItem_max_order_by
  min: UserFavoriteItem_min_order_by
}

# input type for inserting array relation for remote table "UserFavoriteItem"
input UserFavoriteItem_arr_rel_insert_input {
  data: [UserFavoriteItem_insert_input!]!
  on_conflict: UserFavoriteItem_on_conflict
}

# Boolean expression to filter rows from the table "UserFavoriteItem". All fields are combined with a logical 'AND'.
input UserFavoriteItem_bool_exp {
  StoreItem: StoreItem_bool_exp
  _and: [UserFavoriteItem_bool_exp]
  _not: UserFavoriteItem_bool_exp
  _or: [UserFavoriteItem_bool_exp]
  id: uuid_comparison_exp
  itemBarcodeId: String_comparison_exp
  userId: String_comparison_exp
}

# unique or primary key constraints on table "UserFavoriteItem"
enum UserFavoriteItem_constraint {
  # unique or primary key constraint
  UserFavoriteItem_pkey
}

# input type for inserting data into table "UserFavoriteItem"
input UserFavoriteItem_insert_input {
  StoreItem: StoreItem_obj_rel_insert_input
  id: uuid
  itemBarcodeId: String
  userId: String
}

# aggregate max on columns
type UserFavoriteItem_max_fields {
  id: uuid
  itemBarcodeId: String
  userId: String
}

# order by max() on columns of table "UserFavoriteItem"
input UserFavoriteItem_max_order_by {
  id: order_by
  itemBarcodeId: order_by
  userId: order_by
}

# aggregate min on columns
type UserFavoriteItem_min_fields {
  id: uuid
  itemBarcodeId: String
  userId: String
}

# order by min() on columns of table "UserFavoriteItem"
input UserFavoriteItem_min_order_by {
  id: order_by
  itemBarcodeId: order_by
  userId: order_by
}

# response of any mutation on the table "UserFavoriteItem"
type UserFavoriteItem_mutation_response {
  # number of affected rows by the mutation
  affected_rows: Int!

  # data of the affected rows by the mutation
  returning: [UserFavoriteItem!]!
}

# input type for inserting object relation for remote table "UserFavoriteItem"
input UserFavoriteItem_obj_rel_insert_input {
  data: UserFavoriteItem_insert_input!
  on_conflict: UserFavoriteItem_on_conflict
}

# on conflict condition type for table "UserFavoriteItem"
input UserFavoriteItem_on_conflict {
  constraint: UserFavoriteItem_constraint!
  update_columns: [UserFavoriteItem_update_column!]!
  where: UserFavoriteItem_bool_exp
}

# ordering options when selecting data from "UserFavoriteItem"
input UserFavoriteItem_order_by {
  StoreItem: StoreItem_order_by
  id: order_by
  itemBarcodeId: order_by
  userId: order_by
}

# primary key columns input for table: "UserFavoriteItem"
input UserFavoriteItem_pk_columns_input {
  id: uuid!
}

# select columns of table "UserFavoriteItem"
enum UserFavoriteItem_select_column {
  # column name
  id

  # column name
  itemBarcodeId

  # column name
  userId
}

# input type for updating data in table "UserFavoriteItem"
input UserFavoriteItem_set_input {
  id: uuid
  itemBarcodeId: String
  userId: String
}

# update columns of table "UserFavoriteItem"
enum UserFavoriteItem_update_column {
  # column name
  id

  # column name
  itemBarcodeId

  # column name
  userId
}

# columns and relationships of "UserFavoriteStore"
type UserFavoriteStore {
  # An object relationship
  Store: Store!
  id: uuid!
  storeId: uuid!
  userId: String!
}

# aggregated selection of "UserFavoriteStore"
type UserFavoriteStore_aggregate {
  aggregate: UserFavoriteStore_aggregate_fields
  nodes: [UserFavoriteStore!]!
}

# aggregate fields of "UserFavoriteStore"
type UserFavoriteStore_aggregate_fields {
  count(columns: [UserFavoriteStore_select_column!], distinct: Boolean): Int
  max: UserFavoriteStore_max_fields
  min: UserFavoriteStore_min_fields
}

# order by aggregate values of table "UserFavoriteStore"
input UserFavoriteStore_aggregate_order_by {
  count: order_by
  max: UserFavoriteStore_max_order_by
  min: UserFavoriteStore_min_order_by
}

# input type for inserting array relation for remote table "UserFavoriteStore"
input UserFavoriteStore_arr_rel_insert_input {
  data: [UserFavoriteStore_insert_input!]!
  on_conflict: UserFavoriteStore_on_conflict
}

# Boolean expression to filter rows from the table "UserFavoriteStore". All fields are combined with a logical 'AND'.
input UserFavoriteStore_bool_exp {
  Store: Store_bool_exp
  _and: [UserFavoriteStore_bool_exp]
  _not: UserFavoriteStore_bool_exp
  _or: [UserFavoriteStore_bool_exp]
  id: uuid_comparison_exp
  storeId: uuid_comparison_exp
  userId: String_comparison_exp
}

# unique or primary key constraints on table "UserFavoriteStore"
enum UserFavoriteStore_constraint {
  # unique or primary key constraint
  UserFavoriteStore_pkey
}

# input type for inserting data into table "UserFavoriteStore"
input UserFavoriteStore_insert_input {
  Store: Store_obj_rel_insert_input
  id: uuid
  storeId: uuid
  userId: String
}

# aggregate max on columns
type UserFavoriteStore_max_fields {
  id: uuid
  storeId: uuid
  userId: String
}

# order by max() on columns of table "UserFavoriteStore"
input UserFavoriteStore_max_order_by {
  id: order_by
  storeId: order_by
  userId: order_by
}

# aggregate min on columns
type UserFavoriteStore_min_fields {
  id: uuid
  storeId: uuid
  userId: String
}

# order by min() on columns of table "UserFavoriteStore"
input UserFavoriteStore_min_order_by {
  id: order_by
  storeId: order_by
  userId: order_by
}

# response of any mutation on the table "UserFavoriteStore"
type UserFavoriteStore_mutation_response {
  # number of affected rows by the mutation
  affected_rows: Int!

  # data of the affected rows by the mutation
  returning: [UserFavoriteStore!]!
}

# input type for inserting object relation for remote table "UserFavoriteStore"
input UserFavoriteStore_obj_rel_insert_input {
  data: UserFavoriteStore_insert_input!
  on_conflict: UserFavoriteStore_on_conflict
}

# on conflict condition type for table "UserFavoriteStore"
input UserFavoriteStore_on_conflict {
  constraint: UserFavoriteStore_constraint!
  update_columns: [UserFavoriteStore_update_column!]!
  where: UserFavoriteStore_bool_exp
}

# ordering options when selecting data from "UserFavoriteStore"
input UserFavoriteStore_order_by {
  Store: Store_order_by
  id: order_by
  storeId: order_by
  userId: order_by
}

# primary key columns input for table: "UserFavoriteStore"
input UserFavoriteStore_pk_columns_input {
  id: uuid!
}

# select columns of table "UserFavoriteStore"
enum UserFavoriteStore_select_column {
  # column name
  id

  # column name
  storeId

  # column name
  userId
}

# input type for updating data in table "UserFavoriteStore"
input UserFavoriteStore_set_input {
  id: uuid
  storeId: uuid
  userId: String
}

# update columns of table "UserFavoriteStore"
enum UserFavoriteStore_update_column {
  # column name
  id

  # column name
  storeId

  # column name
  userId
}

scalar uuid

# expression to compare columns of type uuid. All fields are combined with logical 'AND'.
input uuid_comparison_exp {
  _eq: uuid
  _gt: uuid
  _gte: uuid
  _in: [uuid!]
  _is_null: Boolean
  _lt: uuid
  _lte: uuid
  _neq: uuid
  _nin: [uuid!]
}

