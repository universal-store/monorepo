/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 *
 * @format
 */

import * as Context from '../../utils/context';
import { core } from '@nexus/schema';
declare global {
  interface NexusGenCustomInputMethods<TypeName extends string> {
    upload<FieldName extends string>(
      fieldName: FieldName,
      opts?: core.ScalarInputFieldConfig<core.GetGen3<'inputTypes', TypeName, FieldName>>
    ): void; // "Upload";
  }
}
declare global {
  interface NexusGenCustomOutputMethods<TypeName extends string> {
    upload<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void; // "Upload";
  }
}
declare global {
  interface NexusGenCustomOutputProperties<TypeName extends string> {
    crud: NexusPrisma<TypeName, 'crud'>;
    model: NexusPrisma<TypeName, 'model'>;
  }
}

declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  UserWhereInput: {
    // input type
    id: string; // String!
  };
  UserWhereUniqueInput: {
    // input type
    id?: string | null; // String
    phoneNumber?: string | null; // String
    sessionId?: string | null; // String
  };
}

export interface NexusGenEnums {}

export interface NexusGenScalars {
  String: string;
  Int: number;
  Float: number;
  Boolean: boolean;
  ID: string;
  Upload: any;
}

export interface NexusGenRootTypes {
  AuthPayload: {
    // root type
    sessionId: string; // String!
    user: NexusGenRootTypes['User']; // User!
  };
  Query: {};
  User: {
    // root type
    firstName?: string | null; // String
    id: string; // String!
    lastName?: string | null; // String
    phoneNumber: string; // String!
  };
  UserProfilePhoto: {
    // root type
    size128: string; // String!
    size256: string; // String!
    size512: string; // String!
    size64: string; // String!
  };
}

export interface NexusGenAllTypes extends NexusGenRootTypes {
  UserWhereInput: NexusGenInputs['UserWhereInput'];
  UserWhereUniqueInput: NexusGenInputs['UserWhereUniqueInput'];
  String: NexusGenScalars['String'];
  Int: NexusGenScalars['Int'];
  Float: NexusGenScalars['Float'];
  Boolean: NexusGenScalars['Boolean'];
  ID: NexusGenScalars['ID'];
  Upload: NexusGenScalars['Upload'];
}

export interface NexusGenFieldTypes {
  AuthPayload: {
    // field return type
    sessionId: string; // String!
    user: NexusGenRootTypes['User']; // User!
  };
  Query: {
    // field return type
    me: NexusGenRootTypes['User']; // User!
    user: NexusGenRootTypes['User'] | null; // User
  };
  User: {
    // field return type
    firstName: string | null; // String
    id: string; // String!
    lastName: string | null; // String
    phoneNumber: string; // String!
    profilePhoto: NexusGenRootTypes['UserProfilePhoto'] | null; // UserProfilePhoto
  };
  UserProfilePhoto: {
    // field return type
    size128: string; // String!
    size256: string; // String!
    size512: string; // String!
    size64: string; // String!
  };
}

export interface NexusGenArgTypes {
  Query: {
    user: {
      // args
      where: NexusGenInputs['UserWhereUniqueInput']; // UserWhereUniqueInput!
    };
  };
}

export interface NexusGenAbstractResolveReturnTypes {}

export interface NexusGenInheritedFields {}

export type NexusGenObjectNames = 'AuthPayload' | 'Query' | 'User' | 'UserProfilePhoto';

export type NexusGenInputNames = 'UserWhereInput' | 'UserWhereUniqueInput';

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = 'Boolean' | 'Float' | 'ID' | 'Int' | 'String' | 'Upload';

export type NexusGenUnionNames = never;

export interface NexusGenTypes {
  context: Context.Context;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  allTypes: NexusGenAllTypes;
  inheritedFields: NexusGenInheritedFields;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes:
    | NexusGenTypes['objectNames']
    | NexusGenTypes['enumNames']
    | NexusGenTypes['unionNames']
    | NexusGenTypes['interfaceNames']
    | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes'];
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractResolveReturn: NexusGenAbstractResolveReturnTypes;
}

declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {}
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {}
  interface NexusGenPluginSchemaConfig {}
}
